{"version":3,"sources":["modules/model/filtering-data.js","modules/view/template-variables.js","modules/model/api-request.js","modules/model/parsing-data.js","modules/controller/location-controls.js","modules/controller/table-filter-controls.js","modules/controller/temperature-controls.js","modules/view/table-components.js","modules/view/app.js","reportWebVitals.js","index.js"],"names":["addCategoryMetric","category","fahrenheit","document","getElementById","checked","filterData","filteredCategories","data","forecastedDays","filteredData","table","metricCategory","current","map","day","forecasted","wholeWeek","emptyCategories","emptyDataTemplate","location","filterCategories","filterCategoriesTemplate","getWeatherData","a","city","value","country","exports","requestApi","locationData","weatherData","lat","lon","TypeError","console","log","error","param1","param2","url","request","fetch","then","res","json","catch","err","convertTempData","fahrenheitSelected","oldTemp","Temperature","newTemp","Math","round","convertedData","getDateString","unixTime","time","date","Date","string","toTimeString","substring","toDateString","parseData","timezone","dt","temp","clouds","rain","wind_speed","humidity","description","weather","sunrise","sunset","daily","parsedData","toUpperCase","slice","dayData","LocationFilter","setData","setFilteredData","useContext","Context","locationInput","type","id","toLocaleLowerCase","onChange","timer","clearTimeout","setTimeout","debounceRetrieveData","textDebounce","autoFocus","TableFilters","filters","displayFilters","target","label","parentElement","labelText","textContent","isCategory","includes","allLabels","children","shift","forEach","className","firstElementChild","tableCategories","selectCategory","setFilteredCategories","dayIndex","labelElement","indexOf","filter","val","sort","selectedDays","setForecastedDays","isNaN","defaultChecked","toString","Temperatures","changeTempUnit","celsius","fahren","JSON","stringify","unit","name","DayHeaders","header","split","CreateRows","tableContent","rows","Object","entries","scope","Array","isArray","from","i","Tables","title","ErrorBoundary","state","this","setState","hasError","props","React","Component","createContext","FilterFieldsets","categories","keys","App","useState","filteredDataTemplate","Provider","childNodes","nodeValue","nextElementSibling","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bbdd77fd.chunk.js","sourcesContent":["export function addCategoryMetric(category) {\r\n    const fahrenheit = document.getElementById('fahrenheit')?.checked,\r\n        metric = category === 'Temperature' && fahrenheit\r\n            ? ' (\\u00B0F)'\r\n            : category === 'Temperature'\r\n                ? ' (\\u00B0C)'\r\n                : category === 'Clouds' || category === 'Humidity'\r\n                    ? ' (%)'\r\n                    : category === 'Wind'\r\n                        ? ' (kn)'\r\n                        : category === 'Rain'\r\n                            ? ' (mm)'\r\n                            : '';\r\n\r\n    return category + metric;\r\n}\r\n\r\nexport function filterData(filteredCategories, data, forecastedDays) {\r\n    let filteredData = { \r\n        'current': {}, \r\n        'forecasted': {} \r\n    };\r\n    for (const table in filteredCategories) {\r\n        for (const category in filteredCategories[table]) {\r\n            if (filteredCategories[table][category]) {\r\n                const metricCategory = addCategoryMetric(category);\r\n                filteredData[table][metricCategory] = \r\n                    table === 'current' \r\n                        ? data.current[category]\r\n                        : forecastedDays.map(day => data.forecasted[day][category]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return filteredData;\r\n}","const wholeWeek = [0, 1, 2, 3, 4, 5, 6 ,7],\r\n    emptyCategories =  {\r\n        'Temperature': '',  \r\n        'Clouds': '', \r\n        'Humidity': '', \r\n        'Wind': '', \r\n        'Rain': '', \r\n        'Description': '', \r\n        'Sunrise': '', \r\n        'Sunset': '',\r\n        'deselectAll': ''\r\n    },\r\n    emptyDataTemplate = { \r\n        location: { \r\n            'Timezone': '' \r\n        }, \r\n        current: { \r\n            'Date': '', \r\n            'Time': '', \r\n            ...emptyCategories \r\n        }, \r\n        forecasted: wholeWeek.map(() => emptyCategories)\r\n    },\r\n    filterCategories = {\r\n        'Temperature': true,  \r\n        'Clouds': true, \r\n        'Humidity': true, \r\n        'Wind': true, \r\n        'Rain': true, \r\n        'Description': true, \r\n        'Sunrise': true, \r\n        'Sunset': true,\r\n    },\r\n    filterCategoriesTemplate = {\r\n        'current': {\r\n            'Date': true, \r\n            'Time': true, \r\n            ...filterCategories\r\n        },\r\n        'forecasted': filterCategories\r\n    };\r\n\r\nexport {\r\n    wholeWeek, \r\n    emptyCategories, \r\n    emptyDataTemplate, \r\n    filterCategoriesTemplate\r\n};","export function requestApi(param1, param2, location=false) {\r\n    const url = location \r\n            ? `http://api.openweathermap.org/geo/1.0/direct?q=${param1},${param2}&appid=invalid_key`\r\n            : `https://api.openweathermap.org/data/2.5/onecall?lat=${param1}&lon=${param2}&exclude=minutely,alerts&units=metric&appid=invalid_key`,\r\n        request = fetch(url)\r\n            .then(res => res.json())\r\n            .catch(err => console.error('An Error occured in requestApi:', err));\r\n\r\n    return request;\r\n}\r\n  \r\nexport async function getWeatherData() {\r\n    const city = document.getElementById('city').value,\r\n        country = document.getElementById('country').value;\r\n  \r\n    if (city) {\r\n        try {\r\n            const locationData = await exports.requestApi(city, country, true),\r\n                weatherData = exports.requestApi(locationData[0].lat, locationData[0].lon);\r\n            return weatherData;\r\n        } catch(error) {\r\n            if (error instanceof TypeError) { \r\n                console.log('The city that was searched for has no associated weather data:', error);\r\n            } else { \r\n                console.error('An error occured in getWeatherData():', error); \r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst exports = { requestApi };\r\nexport default exports;\r\n","import { emptyDataTemplate } from '../view/template-variables';\r\n\r\n\r\nexport function convertTempData(data, fahrenheitSelected=true) {\r\n    const oldTemp = data.Temperature,\r\n        newTemp = fahrenheitSelected\r\n            ? Math.round(oldTemp * (9/5) + 32)\r\n            : Math.round((oldTemp - 32) * (5/9)),\r\n        convertedData = {\r\n            ...data, \r\n            'Temperature': newTemp\r\n        };\r\n\r\n    return convertedData;\r\n}\r\n\r\nexport function getDateString(unixTime, time=true) {\r\n    const date = new Date(unixTime * 1000),\r\n        string =  time \r\n            ? date.toTimeString().substring(0, 5) \r\n            : date.toDateString().substring(0, 4) + date.toDateString().substring(8, 11);\r\n\r\n    return string;\r\n}\r\n  \r\nexport function parseData(data) {\r\n    try {\r\n        const { \r\n                timezone, \r\n                current: { \r\n                    dt, \r\n                    temp, \r\n                    clouds, \r\n                    rain, \r\n                    wind_speed, \r\n                    humidity, \r\n                    weather: [{description}], \r\n                    sunrise, \r\n                    sunset \r\n                },\r\n                daily \r\n            } = data,\r\n            parsedData = { \r\n                location: {\r\n                    'Timezone': timezone, \r\n                },\r\n                current: {\r\n                    'Date': getDateString(dt, false),\r\n                    'Time': getDateString(dt),\r\n                    'Temperature': Math.round(temp), \r\n                    'Clouds': clouds,\r\n                    'Humidity': humidity,\r\n                    'Wind': Math.round(wind_speed * 1.943844),\r\n                    'Rain': typeof rain === 'number' ? rain : '-', \r\n                    'Description': description[0].toUpperCase() + description.slice(1),\r\n                    'Sunrise': getDateString(sunrise),\r\n                    'Sunset': getDateString(sunset) \r\n                },\r\n                forecasted: daily.map(day => ({\r\n                    'Date': getDateString(day.dt, false),\r\n                    'Temperature': Math.round(day.temp.day),  \r\n                    'Clouds': day.clouds,\r\n                    'Humidity': day.humidity,\r\n                    'Wind': Math.round(day.wind_speed * 1.943844),\r\n                    'Rain': typeof day.rain === 'number' ? day.rain : '-', \r\n                    'Description': \r\n                        day.weather[0].description[0].toUpperCase() + \r\n                        day.weather[0].description.slice(1),\r\n                    'Sunrise': getDateString(day.sunrise),\r\n                    'Sunset': getDateString(day.sunset)\r\n                }))          \r\n            },\r\n            fahrenheit = document.getElementById('fahrenheit').checked;\r\n        if (fahrenheit) {\r\n            parsedData.current = convertTempData(parsedData.current);\r\n            parsedData.forecasted = parsedData.forecasted.map(dayData => convertTempData(dayData));\r\n        }\r\n        return parsedData;\r\n      \r\n    } catch (error) {\r\n        if (error instanceof TypeError) {\r\n            console.log('Some data associated with the searched city is missing:', error);\r\n        } else { \r\n            console.error('An error occured in parseData():', error);\r\n        }\r\n    }\r\n\r\n    return emptyDataTemplate;\r\n}\r\n","import React, { useContext } from 'react';\r\n\r\nimport { Context } from '../view/app';\r\nimport { emptyDataTemplate } from '../view/template-variables';\r\nimport { filterData } from '../model/filtering-data';\r\nimport { getWeatherData } from '../model/api-request';\r\nimport { parseData } from '../model/parsing-data';\r\n\r\n\r\nexport default function LocationFilter({ location }) {\r\n    async function debounceRetrieveData () {\r\n        const weatherData = await getWeatherData(),\r\n            parsedData = weatherData ? parseData(weatherData) : emptyDataTemplate;\r\n        setData(parsedData);\r\n        const filteredData = filterData(filteredCategories, parsedData, forecastedDays);\r\n        setFilteredData(filteredData);\r\n    }\r\n    function textDebounce() {\r\n        let timer;\r\n        return () => {\r\n            const callback = () => {\r\n                clearTimeout(timer);\r\n                debounceRetrieveData();\r\n            };\r\n            clearTimeout(timer);\r\n            timer = setTimeout(callback, 2000);\r\n        };\r\n    }\r\n    const { setData, \r\n            forecastedDays, \r\n            filteredCategories, \r\n            setFilteredData\r\n        } = useContext(Context),\r\n        locationInput = \r\n            <label>\r\n                {location}\r\n                <input \r\n                    type=\"text\" \r\n                    id={location.toLocaleLowerCase()}\r\n                    onChange={textDebounce()} \r\n                    autoFocus={location === 'City'}\r\n                />\r\n            </label>;\r\n\r\n    return locationInput;\r\n}\r\n","import React, { useContext } from 'react';\r\n\r\nimport { Context } from '../view/app';\r\nimport { filterData } from '../model/filtering-data';\r\nimport { wholeWeek } from '../view/template-variables';\r\n\r\n\r\nexport default function TableFilters({ table, filters }) {\r\n    function selectCategory(tableCategories, labelText, checked) {\r\n        if (labelText === 'deselectAll') {\r\n            for (const category in tableCategories) {\r\n                tableCategories[category] = checked ? true : false;\r\n            }\r\n        } else {\r\n            tableCategories[labelText] = checked;\r\n        }\r\n  \r\n        return tableCategories;\r\n    }\r\n    function selectedDays(labelText, allLabels, forecastedDays, checked) {\r\n        if (labelText !== 'deselectAll') {\r\n            let dayIndex;\r\n            allLabels.forEach(labelElement => {\r\n                dayIndex = labelElement.textContent === labelText \r\n                    ? allLabels.indexOf(labelElement) \r\n                    : dayIndex;\r\n            });\r\n            forecastedDays = forecastedDays.includes(dayIndex) \r\n                ? forecastedDays.filter(val => val !== dayIndex) \r\n                : [dayIndex, ...forecastedDays].sort();\r\n        } else {\r\n            forecastedDays = checked ? wholeWeek : [];\r\n        }\r\n  \r\n        return forecastedDays;\r\n    }\r\n    function displayFilters({ target: { checked, parentElement } }) {\r\n        const label = parentElement,\r\n            labelText = label.textContent,\r\n            isCategory = label.parentElement.textContent.includes('Categories'),\r\n            allLabels = [...label.parentElement.children];\r\n        allLabels.shift();\r\n        if (labelText === 'deselectAll') {\r\n            allLabels.forEach(label => {\r\n                label.className = checked ? '' : 'input-unselected';\r\n                label.firstElementChild.checked = checked;\r\n            });\r\n        } else { \r\n            label.className = checked ? '' : 'input-unselected'; \r\n        }\r\n        if (isCategory) {\r\n            filteredCategories[table] = selectCategory(filteredCategories[table], labelText, checked);\r\n            setFilteredCategories({ ...filteredCategories, [table]:filteredCategories[table] });\r\n        } else {\r\n            forecastedDays = selectedDays(labelText, allLabels, forecastedDays, checked);\r\n            setForecastedDays(forecastedDays);\r\n        }\r\n        const filteredData = filterData(filteredCategories, data, forecastedDays);\r\n        setFilteredData(filteredData);\r\n    }\r\n    \r\n    let {\r\n        data, \r\n        forecastedDays, \r\n        setForecastedDays, \r\n        filteredCategories,\r\n        setFilteredCategories, \r\n        setFilteredData\r\n    } = useContext(Context);\r\n    const selectedInputs = filters.map(filter => (\r\n        <label key={filter.toString()}>\r\n            {(isNaN(filter) && filter) || (data.forecasted[filter].Date || 'Day ' + (filter + 1))}\r\n            <input \r\n                type=\"checkbox\"\r\n                onChange={displayFilters}\r\n                defaultChecked\r\n            />\r\n        </label>\r\n    ));\r\n\r\n    return selectedInputs;\r\n}\r\n","import React, { useContext } from 'react';\r\n\r\nimport { Context } from '../view/app';\r\nimport { convertTempData } from '../model/parsing-data';\r\nimport { emptyDataTemplate } from '../view/template-variables';\r\nimport { filterData } from '../model/filtering-data';\r\n\r\n\r\n\r\nexport default function Temperatures() {\r\n    function changeTempUnit() {  \r\n        const celsius = document.getElementById('celsius'),\r\n            fahren = document.getElementById('fahrenheit');        \r\n        celsius.parentElement.className = celsius.checked ? 'input-selected' : 'input-unselected';\r\n        fahren.parentElement.className = fahren.checked ? 'input-selected' : 'input-unselected';\r\n\r\n        const dataOnDisplay = JSON.stringify(data) !== JSON.stringify(emptyDataTemplate);\r\n        if (dataOnDisplay) {\r\n            const fahrenheitSelected = fahren.checked;\r\n            data.current = convertTempData(data.current, fahrenheitSelected);\r\n            data.forecasted = data.forecasted.map(dayData => convertTempData(dayData, fahrenheitSelected));\r\n        }\r\n        const filteredData = filterData(filteredCategories, data, forecastedDays);\r\n        setFilteredData(filteredData);\r\n    }\r\n    const {\r\n            data, \r\n            forecastedDays, \r\n            filteredCategories, \r\n            setFilteredData\r\n        } = useContext(Context),\r\n        tempInputs = ['Celsius', 'Fahrenheit'].map(unit => (\r\n            <label key={unit} >\r\n                {unit}\r\n                <input \r\n                    type=\"radio\" \r\n                    id={unit.toLocaleLowerCase()}\r\n                    name=\"temp\"\r\n                    onChange={changeTempUnit} \r\n                    defaultChecked={unit === 'Celsius'}\r\n                />\r\n            </label>\r\n        ));\r\n\r\n    return tempInputs;\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React, { useContext } from 'react';\r\n\r\nimport { Context } from './app';\r\n\r\n\r\nexport function DayHeaders() {\r\n    const { data, forecastedDays } = useContext(Context);\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th> </th>\r\n                {forecastedDays.map(day => {\r\n                    let header = data.forecasted[day].Date || 'Day '+ (day+1);\r\n                    header = header.split(' ');\r\n                    return (\r\n                        <th key={day.toString()}>\r\n                            {header[0]}<br/>{header[1]}\r\n                        </th>  \r\n                    );\r\n                })}\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n  \r\nexport function CreateRows({ tableContent }) {\r\n    const rows = Object.entries(tableContent).map(([header, data]) => (\r\n        <tr \r\n            key={header} \r\n            className={['Date', 'Time'].includes(header) ? 'time-row' : ''}\r\n        >\r\n            <th scope=\"row\">{header}</th>\r\n            {(Array.isArray(data) && Array.from(data, (day, i) => <td key={i.toString()}>{day}</td>)) || <td>{data}</td>}\r\n        </tr>\r\n    ));\r\n  \r\n    return <tbody>{rows}</tbody>;\r\n}\r\nCreateRows.propTypes = { tableContent: PropTypes.object.isRequired };\r\n\r\nexport function Tables() {\r\n    const { data, filteredData } = useContext(Context),\r\n        tableInformation = [\r\n            ['Location', data.location], \r\n            ['Current Weather', filteredData.current], \r\n            ['8 Day Forecast', filteredData.forecasted]\r\n        ],\r\n        tables = tableInformation.map(([title, tableContent]) => (\r\n            <table key={title}>\r\n                <caption>{title}</caption>\r\n                {title.includes('8') && <DayHeaders />}\r\n                <CreateRows tableContent={tableContent} />\r\n                {title.includes('8') && <tfoot><tr><td>* Data provided by OpenWeather API</td></tr></tfoot>}\r\n            </table>\r\n        ));\r\n\r\n    return tables;\r\n}\r\n","/* eslint-disable react/no-unescaped-entities */\r\nimport PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\n\r\nimport { filterData } from '../model/filtering-data';\r\nimport LocationFilter from '../controller/location-controls';\r\nimport TableFilters from '../controller/table-filter-controls';\r\nimport Temperatures from '../controller/temperature-controls';\r\nimport { Tables } from './table-components';\r\nimport { wholeWeek, \r\n    emptyCategories, \r\n    emptyDataTemplate, \r\n    filterCategoriesTemplate } from './template-variables';\r\n\r\n\r\nexport class ErrorBoundary extends React.Component {\r\n  state = {'hasError': false};\r\n  componentDidCatch(error) {\r\n      this.setState({'hasError': true});\r\n      console.error('An error occured:', error);\r\n  }\r\n  render() {\r\n      return (this.state.hasError && <h1>An error has occured</h1>) \r\n    || this.props.children;\r\n  }\r\n}\r\nErrorBoundary.propTypes = { children: PropTypes.element.isRequired };\r\n\r\nexport const Context = React.createContext();\r\n\r\nfunction FilterFieldsets() {\r\n    const categories = Object.keys(emptyCategories),\r\n        filterInputs = [\r\n            <fieldset key='1'>\r\n                <legend>Temperature Units</legend>\r\n                <Temperatures />\r\n            </fieldset>,\r\n            <fieldset key='2'>\r\n                <legend>\"Current Weather\" Categories</legend>\r\n                <TableFilters key='2' table=\"current\" filters={['Date', 'Time', ...categories]} />\r\n            </fieldset>,\r\n            <fieldset key='3'>\r\n                <legend>\"8 Day Forecast\" Categories</legend>\r\n                <TableFilters key='3' table=\"forecasted\" filters={categories} />\r\n            </fieldset>,\r\n            <fieldset key='4'>\r\n                <legend>\"8 Day Forecast\" Days</legend>\r\n                <TableFilters key='4' table=\"forecasted\" filters={[...wholeWeek, 'deselectAll']}/>\r\n            </fieldset>\r\n        ];\r\n    return filterInputs;\r\n}\r\n\r\nexport function App() {\r\n    function optionalFilterButton({ target: { parentElement, checked }}) {\r\n        parentElement.childNodes[0].nodeValue = checked \r\n            ? 'Filter \\u25B8' \r\n            : 'Filter \\u25B9';\r\n        parentElement.nextElementSibling.className = checked ? 'hide-filters' : 'filter-container';\r\n    }\r\n\r\n    const [data, setData] = useState(emptyDataTemplate),\r\n        [forecastedDays, setForecastedDays] = useState(wholeWeek),\r\n        [filteredCategories, setFilteredCategories] = useState(filterCategoriesTemplate),\r\n        filteredDataTemplate =  filterData(filterCategoriesTemplate, data, forecastedDays),\r\n        [filteredData, setFilteredData] = useState(filteredDataTemplate);\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <Context.Provider value={{\r\n                data, \r\n                setData, \r\n                filteredCategories, \r\n                setFilteredCategories, \r\n                forecastedDays, \r\n                setForecastedDays,\r\n                filteredData,\r\n                setFilteredData \r\n            }}>\r\n                <form>\r\n                    <LocationFilter location=\"City\" />\r\n                    <label className=\"filter-label\">\r\n                        {'Filter \\u25B9'}\r\n                        <input type=\"checkbox\" onChange={optionalFilterButton} />\r\n                    </label>\r\n                    <div className=\"filter-container\">\r\n                        <LocationFilter location=\"Country\" />\r\n                        <FilterFieldsets />\r\n                    </div>\r\n                </form>\r\n                <div className=\"table-container\">\r\n                    <Tables />\r\n                </div>\r\n            </Context.Provider>\r\n        </ErrorBoundary>\r\n    );\r\n}\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './modules/view/app';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals(console.log);"],"sourceRoot":""}