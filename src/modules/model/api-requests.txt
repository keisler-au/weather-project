The "api-requests" module contains two functions to facilitate data requests to "OpenWeather" API's. "requestApi()" uses the "fetch()" API to make a request to "OpenWeather", using one of two url potential URL's. The first URL is for the "Geocoding API" which is provides location data on the specified 'city' and 'country' parameters, this URL is chosen when the "location" parameter is set to "true". The alternative URL is for "One Call API" which provides weather data for the specified 'longditude' and 'latitude' and coordinates (retrieved from the first API call). A "catch()" method logs any errors caught in the "fetch()" call.
The logic in "getWeatherData()" reflects how the "country" parameter in the API request is optional (providing more specificity on the user's desired location) while the "city" parameter is needed to make a valid API request. "getWeatherData()" is called when a user finishes typing a value into the 'city' or 'country' text inputs. If the 'country' input is typed into, and the 'city' input already has an entered value, then an API request is made with both "city" and "country" values as parameters. If 'country' input is typed into and the 'city' input does not already have an entered value, then no API request is made. Alternatively, if 'city' input is typed into, an API request is made regardless of whether 'country' input has a value or not. A "catch" block logs a specific message if the error caught is "TypeError", as this indicates that the response from a request did not contain any data. Alternatively, any other type of error is logged to the console.

To test "requestApi()" the "jest-fetch-mock" module was used to mocked the "fetch()" call and reduce test latency. The unit test involves mocking a 'fulfilled' or 'rejected' response and testing that the resolved promise matches the expected output. 
Testing "getWeatherData()" involves testing the conditional logic where "requestApi()" only gets called if 'city' input has a value, otherwise "getWeatherData()" returns null. The catch block is also tested. "requestApi()" was mocked to return undefined or invalid data, the resultant 'TypeError' is expected to be caught and a specific message logged to the console notifying that there was no weather data associated with the specified city. Alternatively, if another error is thrown, a generic error message is expected to be logged, and is tested by mocking "console.error" method. 
Additionally, to test "getWeatherData()", "requestApi()" has been referenced within the scope of the "exports", "imports" variables so that it can be mocked. When importing "api-requests.js" into the test file, "getWeatherData" is retrieving a reference to the actual "requestApi" in it's closure. This means that when mocking "requestApi" in the test file, "getWeatherData" is not referencing and calling the mocked global version, but rather the actual local version within its scope. To make use of the mock, "requestApi" has been declared to a global object (the default export), which is then referenced inside "getWeatherData". Therefore, mocking the global variables "requestApi" is also mocking the same "requestApi" that "getWeatherData" calls.