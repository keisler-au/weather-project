The "Temperatures" component outputs two <label><input/></label> radio button that the user interacts with to determine what measurement unit temperature data is displayed in. The "onChange" event handler "changeTempUnit" updates the <label> nodes CSS class names depending on their respective "checked" status. If the "data" variable contains weather data (from a user specifying a searchable location), then "convertTempData()" function is used to convert the current temperature data stored in "data" to the alternative temperature unit (celsius or fahrenheit). This updated dataset goes into intialising "filteredData", a variable used to determine what data is displayed in the user-interactive tables. The state of "filteredData" is updated by "setState()" React hook and "setFilteredData()" function. 

The unit test for "Temperatures" tests that the component outputs two <label> nodes, with no class names. The "onChange" event and "convertTempData()" function were mocked. As the event gets triggered, the mocked "convertTempData()" is expected to change the "data" variable used by "filteredData()", and the <label> class names ('input-selected', 'input-unselected') are expected to reflect the checked status of the two radio buttons. 