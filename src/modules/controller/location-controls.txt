"LocationFilter" outputs two <label/> nodes with a text <input/> node inside each. The text inputs are for the user to specify "City" and "Country" locations that they wish to receive related weather data for. Each input has an "onChange" debounce event handler. After 2000ms has passed from the last typed letter the specified callback function in setTimeout will be called. The callback function retrieves relevant data by calling "getWeatherData()" and formats it by calling "parseData()". If no data is available then a formatted data template with no inclusive data is initialised to the "parsedData" variable. The newly initialised "parsedData" variable is made accessible to other components by using the "useState()" and "useContext()" React hooks, which implemented in the "setTimeout()" callback by calling "setData()". The "parsedData" variable holds a complete dataset of the retrieved/formatted data and is updated by calling "setData()". The "filteredData" variable holds a filtered version of "parsedData" which corresponds to the filters applied to each table. The data stored in "filteredData" is determined by the table columns and rows that have 'filtered' (selected and deselected).

To unit test the "LocationFilter" component the external opertions of "getWeatherData()", "filterData()" and "parseData()" have been mocked out, with each having their own unit tests. The logic being tested is the ouput and the event handler debounce function. Testing the debounce function involves assessing the "setTimeout()" callback function being called only once, and only after 2000ms from the last typed letter. As such it is expected that after typing 'perth' into the input control the "setData()" function located in the callback would not have intially been called. Once the mocked timers have been run, it is expected that only one call to "setData" would have occured, indicating the "setTimeout()" callback was called after the last typed letter.